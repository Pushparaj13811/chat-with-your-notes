// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  password          String?       // Hashed password for custom signup (null for OAuth users)
  name              String?
  picture           String?       // Google profile picture
  googleId          String?       @unique // Google OAuth2 ID
  authProvider      String        @default("custom") // "custom" or "google"
  isVerified        Boolean       @default(false) // Custom users need email verification
  verificationToken String?       // For email verification
  resetToken        String?       // For password reset
  resetTokenExpiry  DateTime?     // Password reset token expiry
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  files             File[]
  chatSessions      ChatSession[]
  devices           Device[]      // Associated devices for migration

  @@map("users")
}

model Device {
  id         String   @id @default(cuid())
  deviceId   String   @unique // The original device identifier
  userId     String? // Optional - for migration
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  isMigrated Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("devices")
}

model File {
  id                 String        @id @default(cuid())
  filename           String        @unique
  originalName       String
  mimeType           String
  size               Int
  path               String
  cloudinaryUrl      String?       // Cloudinary secure URL
  cloudinaryPublicId String?       // Cloudinary public ID for deletion
  deviceId           String?       // Device identifier for access control (optional for migration)
  userId             String?       // User identifier for authenticated users
  user               User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  chunks             Chunk[]
  chatSessions       ChatSession[] @relation("ChatSessionFiles")
  questions          Json?         // Store generated questions as an array

  @@map("files")
}

model Chunk {
  id         String   @id @default(cuid())
  content    String   @db.Text
  chunkIndex Int
  startChar  Int
  endChar    Int
  embedding  Float[]
  fileId     String
  file       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@map("chunks")
}

model ChatSession {
  id                  String        @id @default(cuid())
  title               String
  deviceId            String?       // Device identifier for access control (optional for migration)
  userId              String?       // User identifier for authenticated users
  user                User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  files               File[]        @relation("ChatSessionFiles")
  messages            ChatMessage[]
  conversationSummary String?       @db.Text // Summary of the conversation for memory
  lastSummarizedAt    DateTime?     // When the conversation was last summarized
  messageCount        Int           @default(0) // Track number of messages for memory management
  isSummarized        Boolean       @default(false) // Whether the conversation has been summarized
}

model ChatMessage {
  id            String      @id @default(cuid())
  role          String // "user" or "assistant"
  content       String      @db.Text
  createdAt     DateTime    @default(now())
  chatSessionId String
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  context       Json? // Store context chunks or other metadata
  isSummarized  Boolean     @default(false) // Whether this message is included in summary
}
